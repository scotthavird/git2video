name: Test PR Build and Video Rendering

on:
  workflow_run:
    workflows: ["Build and Publish Docker Image"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-pr-image:
    runs-on: ubuntu-latest
    # Only run for successful builds from OPEN PRs or manual dispatch
    # Skip if the PR was merged (closed) or if running on main branch
    if: |
      (github.event.workflow_run.conclusion == 'success' && 
       github.event.workflow_run.event == 'pull_request' &&
       github.event.workflow_run.head_branch != 'main') ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: read
      pull-requests: write

    outputs:
      pr_number: ${{ steps.extract-pr.outputs.pr_number }}
      image_tag: ${{ steps.extract-pr.outputs.image_tag }}
      test_success: ${{ steps.test-render.outputs.success }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract PR information
      id: extract-pr
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          PR_NUMBER="${{ github.event.inputs.pr_number }}"
          IMAGE_TAG="pr-${PR_NUMBER}"
        else
          # Extract PR number from workflow run
          PR_NUMBER=$(echo "${{ github.event.workflow_run.head_branch }}" | grep -oP 'pull/\K\d+(?=/merge)' || echo "")
          if [ -z "$PR_NUMBER" ]; then
            # Try alternative method - get from pull_requests API
            PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls --jq ".[] | select(.head.sha==\"${{ github.event.workflow_run.head_sha }}\") | .number" | head -1)
          fi
          IMAGE_TAG="pr-${PR_NUMBER}"
        fi
        
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Found PR: $PR_NUMBER, Image tag: $IMAGE_TAG"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test output directory
      run: mkdir -p ./test-output

    - name: Test Default Video Rendering
      id: test-render
      run: |
        echo "Testing PR image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-pr.outputs.image_tag }}"
        
        # Test default video rendering
        if docker run --rm \
          -v $(pwd)/test-output:/usr/src/app/out \
          -e TITLE="PR Test Video" \
          -e SUBTITLE="Testing PR #${{ steps.extract-pr.outputs.pr_number }}" \
          -e CONTENT_HEADER="Build Verification" \
          -e OUTRO_MESSAGE="PR Build Success!" \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-pr.outputs.image_tag }}; then
          echo "‚úÖ Default video rendering test PASSED"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Default video rendering test FAILED"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Test PR Video Rendering (if PR exists)
      if: steps.extract-pr.outputs.pr_number != ''
      run: |
        echo "Testing PR video rendering for PR #${{ steps.extract-pr.outputs.pr_number }}"
        
        # Test PR video rendering
        if docker run --rm \
          -v $(pwd)/test-output:/usr/src/app/out \
          -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
          -e GITHUB_REPOSITORY=${{ github.repository }} \
          -e PR_NUMBER=${{ steps.extract-pr.outputs.pr_number }} \
          -e VIDEO_TYPE=summary \
          -e OUTPUT_NAME=pr-test-${{ steps.extract-pr.outputs.pr_number }} \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract-pr.outputs.image_tag }} \
          npx tsx render-pr-video.ts; then
          echo "‚úÖ PR video rendering test PASSED"
        else
          echo "‚ö†Ô∏è PR video rendering test FAILED (may be expected for some PRs)"
        fi

    - name: Verify output files
      run: |
        echo "Generated test files:"
        ls -la ./test-output/
        
        # Check if any video files were generated
        VIDEO_COUNT=$(find ./test-output -name "*.mp4" | wc -l)
        echo "Video files generated: $VIDEO_COUNT"
        
        if [ $VIDEO_COUNT -gt 0 ]; then
          echo "‚úÖ Video generation successful"
          find ./test-output -name "*.mp4" -exec ls -lh {} \;
        else
          echo "‚ùå No video files generated"
          exit 1
        fi

    - name: Upload test videos as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pr-test-videos-${{ steps.extract-pr.outputs.pr_number || github.run_number }}
        path: ./test-output/*.mp4
        retention-days: 7

    - name: Comment on PR with test results
      if: steps.extract-pr.outputs.pr_number != '' && github.event.workflow_run.event == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ steps.extract-pr.outputs.pr_number }};
          const testSuccess = ${{ steps.test-render.outputs.success }};
          const imageTag = '${{ steps.extract-pr.outputs.image_tag }}';
          
          const status = testSuccess ? '‚úÖ PASSED' : '‚ùå FAILED';
          const emoji = testSuccess ? 'üéâ' : '‚ö†Ô∏è';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: `${emoji} **PR Build & Video Test Results**
            
            **Status**: ${status}
            
            **Test Details:**
            - **Docker Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${imageTag}\`
            - **Build Workflow**: [View Run](${{ github.event.workflow_run.html_url }})
            - **Test Workflow**: [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Tests Performed:**
            - ${testSuccess ? '‚úÖ' : '‚ùå'} Default video rendering
            - ${testSuccess ? '‚úÖ' : '‚ö†Ô∏è'} PR video rendering (if applicable)
            
            ${testSuccess ? 
              'Your PR build is working correctly and can render videos successfully! üé¨' : 
              'There were issues with video rendering. Please check the logs and fix any issues before merging.'}
            
            **Next Steps:**
            ${testSuccess ? 
              '- Ready for review and merge\n- Videos will be automatically generated when merged' : 
              '- Check the workflow logs for detailed error information\n- Fix any build or rendering issues\n- Push updates to trigger a new test'}
            `
          });

  cleanup-test-images:
    runs-on: ubuntu-latest
    needs: [test-pr-image]
    if: always() && needs.test-pr-image.outputs.pr_number != ''
    permissions:
      packages: write
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up PR test image (optional)
      run: |
        # Note: We're keeping PR images for now as they're useful for testing
        # Uncomment below if you want to clean up immediately after testing
        
        # IMAGE_TAG="${{ needs.test-pr-image.outputs.image_tag }}"
        # echo "Cleaning up test image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
        
        # This would require additional permissions and setup for image deletion
        # For now, PR images will be cleaned up by registry retention policies
        
        echo "PR test image will be retained for potential debugging"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.test-pr-image.outputs.image_tag }}"